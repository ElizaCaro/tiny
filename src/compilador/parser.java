
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 18 15:18:05 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 18 15:18:05 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\005" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\007\000\002\007\011\000\002\010\006" +
    "\000\002\037\002\000\002\011\006\000\002\011\010\000" +
    "\002\012\004\000\002\013\004\000\002\014\014\000\002" +
    "\016\003\000\002\016\003\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\015\000\002\021\016\000\002\022\007\000" +
    "\002\022\010\000\002\023\005\000\002\023\003\000\002" +
    "\024\004\000\002\015\005\000\002\015\006\000\002\025" +
    "\005\000\002\025\003\000\002\026\004\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\006\000" +
    "\002\031\005\000\002\031\003\000\002\032\005\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\006\000\002\036\003\000\002\036\003" +
    "\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\012\003\013\022\004\023\006\024\007\001" +
    "\002\000\004\016\uffe8\001\002\000\012\013\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\001\002\000\004\016\uffe7\001\002\000" +
    "\004\016\227\001\002\000\012\013\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\001\002\000\004\002\001\001\002\000\004\002" +
    "\226\001\002\000\014\002\ufffe\013\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\001\002\000\012\013\222\022\004\023\006\024" +
    "\007\001\002\000\004\016\017\001\002\000\012\013\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\001\002\000\004\041\020\001" +
    "\002\000\010\022\004\023\006\042\021\001\002\000\004" +
    "\013\211\001\002\000\006\042\027\046\026\001\002\000" +
    "\004\016\025\001\002\000\006\042\uffdc\046\uffdc\001\002" +
    "\000\006\042\uffdb\046\uffdb\001\002\000\006\022\004\023" +
    "\006\001\002\000\004\013\030\001\002\000\024\003\043" +
    "\004\036\010\050\012\047\014\032\015\037\016\040\022" +
    "\004\023\006\001\002\000\004\045\ufff9\001\002\000\004" +
    "\016\207\001\002\000\004\016\177\001\002\000\004\045" +
    "\ufff3\001\002\000\004\045\ufff7\001\002\000\014\003\071" +
    "\016\067\017\060\020\065\041\073\001\002\000\014\003" +
    "\071\016\067\017\060\020\065\041\073\001\002\000\010" +
    "\021\uffee\041\127\043\153\001\002\000\026\003\043\004" +
    "\036\010\050\012\047\014\032\015\037\016\040\022\004" +
    "\023\006\047\162\001\002\000\004\045\ufff5\001\002\000" +
    "\004\045\ufff2\001\002\000\004\045\ufffa\001\002\000\004" +
    "\045\ufff4\001\002\000\004\045\ufff6\001\002\000\004\041" +
    "\140\001\002\000\024\003\043\004\036\010\050\012\047" +
    "\014\032\015\037\016\040\022\004\023\006\001\002\000" +
    "\004\045\ufff8\001\002\000\004\045\053\001\002\000\034" +
    "\003\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\022\ufffb\023\ufffb\047\ufffb" +
    "\001\002\000\026\003\043\004\036\010\050\011\055\012" +
    "\047\014\032\015\037\016\040\022\004\023\006\001\002" +
    "\000\014\003\071\016\067\017\060\020\065\041\073\001" +
    "\002\000\004\045\057\001\002\000\034\003\ufffc\004\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\022\ufffc\023\ufffc\047\ufffc\001\002\000\042" +
    "\005\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\045\uffbf\046\uffbf\001\002\000\016\005\uffce\025" +
    "\uffce\026\uffce\042\uffce\045\uffce\046\uffce\001\002\000\042" +
    "\005\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\115\040\114" +
    "\042\uffc4\045\uffc4\046\uffc4\001\002\000\006\026\076\045" +
    "\uffef\001\002\000\042\005\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\042\uffbb\045\uffbb\046\uffbb\001\002" +
    "\000\042\005\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\042\uffbc\045\uffbc\046\uffbc\001\002\000\016\005" +
    "\uffd0\025\100\026\uffd0\042\uffd0\045\uffd0\046\uffd0\001\002" +
    "\000\046\005\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\127\042\uffbe\043\126\045\uffbe\046\uffbe\001" +
    "\002\000\042\005\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\045\uffc1\046\uffc1\001\002\000\042" +
    "\005\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\042\uffba\045\uffba\046\uffba\001\002\000\036\005\uffc7\025" +
    "\uffc7\026\uffc7\027\103\030\111\031\106\032\102\033\107" +
    "\034\104\035\105\036\110\042\uffc7\045\uffc7\046\uffc7\001" +
    "\002\000\014\003\071\016\067\017\060\020\065\041\073" +
    "\001\002\000\006\026\076\042\075\001\002\000\042\005" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042" +
    "\uffc0\045\uffc0\046\uffc0\001\002\000\014\003\071\016\067" +
    "\017\060\020\065\041\073\001\002\000\016\005\uffd1\025" +
    "\100\026\uffd1\042\uffd1\045\uffd1\046\uffd1\001\002\000\014" +
    "\003\071\016\067\017\060\020\065\041\073\001\002\000" +
    "\016\005\uffcf\025\uffcf\026\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\001\002\000\014\003\071\016\067\017\060\020\065\041" +
    "\073\001\002\000\014\003\071\016\067\017\060\020\065" +
    "\041\073\001\002\000\014\003\071\016\067\017\060\020" +
    "\065\041\073\001\002\000\014\003\071\016\067\017\060" +
    "\020\065\041\073\001\002\000\014\003\071\016\067\017" +
    "\060\020\065\041\073\001\002\000\014\003\071\016\067" +
    "\017\060\020\065\041\073\001\002\000\014\003\071\016" +
    "\067\017\060\020\065\041\073\001\002\000\014\003\071" +
    "\016\067\017\060\020\065\041\073\001\002\000\022\005" +
    "\uffc9\025\uffc9\026\uffc9\035\105\036\110\042\uffc9\045\uffc9" +
    "\046\uffc9\001\002\000\042\005\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\115\040\114\042\uffc5\045\uffc5\046\uffc5\001" +
    "\002\000\014\003\071\016\067\017\060\020\065\041\073" +
    "\001\002\000\014\003\071\016\067\017\060\020\065\041" +
    "\073\001\002\000\042\005\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\042\uffc3\045\uffc3\046\uffc3\001\002" +
    "\000\042\005\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\042\uffc2\045\uffc2\046\uffc2\001\002\000\022\005" +
    "\uffca\025\uffca\026\uffca\035\105\036\110\042\uffca\045\uffca" +
    "\046\uffca\001\002\000\022\005\uffcb\025\uffcb\026\uffcb\035" +
    "\105\036\110\042\uffcb\045\uffcb\046\uffcb\001\002\000\042" +
    "\005\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\115\040\114" +
    "\042\uffc6\045\uffc6\046\uffc6\001\002\000\022\005\uffcc\025" +
    "\uffcc\026\uffcc\035\105\036\110\042\uffcc\045\uffcc\046\uffcc" +
    "\001\002\000\022\005\uffc8\025\uffc8\026\uffc8\035\105\036" +
    "\110\042\uffc8\045\uffc8\046\uffc8\001\002\000\022\005\uffcd" +
    "\025\uffcd\026\uffcd\035\105\036\110\042\uffcd\045\uffcd\046" +
    "\uffcd\001\002\000\004\017\136\001\002\000\016\003\071" +
    "\016\067\017\060\020\065\041\073\042\132\001\002\000" +
    "\010\026\076\042\uffd7\046\uffd7\001\002\000\006\042\134" +
    "\046\133\001\002\000\042\005\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\042\uffda\045\uffda\046\uffda\001" +
    "\002\000\014\003\071\016\067\017\060\020\065\041\073" +
    "\001\002\000\042\005\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\045\uffd9\046\uffd9\001\002\000" +
    "\010\026\076\042\uffd8\046\uffd8\001\002\000\004\044\137" +
    "\001\002\000\042\005\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\042\uffbd\045\uffbd\046\uffbd\001\002\000" +
    "\004\016\141\001\002\000\006\021\uffee\043\153\001\002" +
    "\000\004\045\143\001\002\000\014\003\071\016\067\017" +
    "\060\020\065\041\073\001\002\000\006\026\076\045\145" +
    "\001\002\000\004\016\141\001\002\000\004\042\147\001" +
    "\002\000\024\003\043\004\036\010\050\012\047\014\032" +
    "\015\037\016\040\022\004\023\006\001\002\000\026\003" +
    "\043\004\036\007\151\010\050\012\047\014\032\015\037" +
    "\016\040\022\004\023\006\001\002\000\004\045\uffe9\001" +
    "\002\000\004\021\160\001\002\000\004\017\154\001\002" +
    "\000\004\044\155\001\002\000\004\021\156\001\002\000" +
    "\014\003\071\016\067\017\060\020\065\041\073\001\002" +
    "\000\010\026\076\042\uffec\045\uffec\001\002\000\014\003" +
    "\071\016\067\017\060\020\065\041\073\001\002\000\010" +
    "\026\076\042\uffed\045\uffed\001\002\000\014\003\071\016" +
    "\067\017\060\020\065\041\073\001\002\000\006\026\076" +
    "\045\164\001\002\000\004\007\165\001\002\000\004\045" +
    "\166\001\002\000\012\013\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\001\002\000\006\026\076\045\uffea\001\002\000\006\005" +
    "\171\026\076\001\002\000\024\003\043\004\036\010\050" +
    "\012\047\014\032\015\037\016\040\022\004\023\006\001" +
    "\002\000\030\003\043\004\036\006\173\007\174\010\050" +
    "\012\047\014\032\015\037\016\040\022\004\023\006\001" +
    "\002\000\024\003\043\004\036\010\050\012\047\014\032" +
    "\015\037\016\040\022\004\023\006\001\002\000\004\045" +
    "\ufff1\001\002\000\026\003\043\004\036\007\176\010\050" +
    "\012\047\014\032\015\037\016\040\022\004\023\006\001" +
    "\002\000\004\045\ufff0\001\002\000\010\043\204\045\uffd3" +
    "\046\uffd3\001\002\000\006\045\uffd6\046\202\001\002\000" +
    "\006\045\uffd4\046\uffd4\001\002\000\004\016\177\001\002" +
    "\000\006\045\uffd5\046\uffd5\001\002\000\004\017\205\001" +
    "\002\000\004\044\206\001\002\000\006\045\uffd2\046\uffd2" +
    "\001\002\000\004\045\uffeb\001\002\000\006\042\uffdd\046" +
    "\uffdd\001\002\000\024\003\043\004\036\010\050\012\047" +
    "\014\032\015\037\016\040\022\004\023\006\001\002\000" +
    "\026\003\043\004\036\010\050\012\047\014\032\015\037" +
    "\016\040\022\004\023\006\047\213\001\002\000\014\003" +
    "\071\016\067\017\060\020\065\041\073\001\002\000\006" +
    "\026\076\045\215\001\002\000\004\007\216\001\002\000" +
    "\004\045\217\001\002\000\012\013\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\001\002\000\004\002\uffff\001\002\000\012\013" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\001\002\000\024\003\043" +
    "\004\036\010\050\012\047\014\032\015\037\016\040\022" +
    "\004\023\006\001\002\000\026\003\043\004\036\007\224" +
    "\010\050\012\047\014\032\015\037\016\040\022\004\023" +
    "\006\001\002\000\004\045\225\001\002\000\014\002\ufffd" +
    "\013\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\004\002" +
    "\000\001\002\000\004\041\230\001\002\000\010\022\004" +
    "\023\006\042\231\001\002\000\004\013\222\001\002\000" +
    "\006\042\233\046\026\001\002\000\004\013\222\001\002" +
    "\000\012\013\uffde\022\uffde\023\uffde\024\uffde\001\002\000" +
    "\012\013\uffdf\022\uffdf\023\uffdf\024\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\020\002\011\003\010\016\014\017\013\020" +
    "\004\021\015\022\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\217\016\014\020\220\021\015\022\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\022\023\021\024\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\022\024\207\001\001\000" +
    "\002\001\001\000\030\005\040\006\051\007\043\010\030" +
    "\011\050\012\034\013\045\014\044\015\033\016\032\026" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\177\030\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\063\031\167\032\065\033\060\034\071" +
    "\035\061\036\067\001\001\000\020\015\063\031\166\032" +
    "\065\033\060\034\071\035\061\036\067\001\001\000\004" +
    "\037\151\001\001\000\026\006\055\007\043\010\030\011" +
    "\050\012\034\013\045\014\044\015\033\016\032\026\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\053\006\051\007\043\010\030\011\050\012" +
    "\034\013\045\014\044\015\033\016\032\026\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\055\007\043\010\030\011\050\012\034\013\045" +
    "\014\044\015\033\016\032\026\041\001\001\000\020\015" +
    "\063\031\062\032\065\033\060\034\071\035\061\036\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\063\031\073\032\065\033\060\034" +
    "\071\035\061\036\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\063\032\076\033\060\034\071\035" +
    "\061\036\067\001\001\000\002\001\001\000\014\015\063" +
    "\033\100\034\071\035\061\036\067\001\001\000\002\001" +
    "\001\000\012\015\063\034\124\035\061\036\067\001\001" +
    "\000\012\015\063\034\123\035\061\036\067\001\001\000" +
    "\012\015\063\034\122\035\061\036\067\001\001\000\010" +
    "\015\063\035\121\036\067\001\001\000\012\015\063\034" +
    "\120\035\061\036\067\001\001\000\012\015\063\034\117" +
    "\035\061\036\067\001\001\000\010\015\063\035\112\036" +
    "\067\001\001\000\012\015\063\034\111\035\061\036\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\063\036\116\001\001\000\006\015\063\036\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\063\025\130\031\127\032\065\033\060\034\071\035\061" +
    "\036\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\063\031\134\032\065\033\060" +
    "\034\071\035\061\036\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\141\001\001\000\004\037\151\001\001\000\002\001" +
    "\001\000\020\015\063\031\143\032\065\033\060\034\071" +
    "\035\061\036\067\001\001\000\002\001\001\000\004\011" +
    "\145\001\001\000\002\001\001\000\030\005\147\006\051" +
    "\007\043\010\030\011\050\012\034\013\045\014\044\015" +
    "\033\016\032\026\041\001\001\000\026\006\055\007\043" +
    "\010\030\011\050\012\034\013\045\014\044\015\033\016" +
    "\032\026\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\063\031\156\032\065\033\060\034\071\035\061" +
    "\036\067\001\001\000\002\001\001\000\020\015\063\031" +
    "\160\032\065\033\060\034\071\035\061\036\067\001\001" +
    "\000\002\001\001\000\020\015\063\031\162\032\065\033" +
    "\060\034\071\035\061\036\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\171\006\051" +
    "\007\043\010\030\011\050\012\034\013\045\014\044\015" +
    "\033\016\032\026\041\001\001\000\026\006\055\007\043" +
    "\010\030\011\050\012\034\013\045\014\044\015\033\016" +
    "\032\026\041\001\001\000\030\005\174\006\051\007\043" +
    "\010\030\011\050\012\034\013\045\014\044\015\033\016" +
    "\032\026\041\001\001\000\002\001\001\000\026\006\055" +
    "\007\043\010\030\011\050\012\034\013\045\014\044\015" +
    "\033\016\032\026\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\211\006\051\007\043\010\030\011\050" +
    "\012\034\013\045\014\044\015\033\016\032\026\041\001" +
    "\001\000\026\006\055\007\043\010\030\011\050\012\034" +
    "\013\045\014\044\015\033\016\032\026\041\001\001\000" +
    "\020\015\063\031\213\032\065\033\060\034\071\035\061" +
    "\036\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\222\006\051\007\043\010\030\011" +
    "\050\012\034\013\045\014\044\015\033\016\032\026\041" +
    "\001\001\000\026\006\055\007\043\010\030\011\050\012" +
    "\034\013\045\014\044\015\033\016\032\026\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\022\023\231\024\023\001\001" +
    "\000\004\004\234\001\001\000\002\001\001\000\004\004" +
    "\233\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= error 
            {
              NodoBase RESULT =null;
		
		System.err.println("********* Expresion No Declarada **************");
		System.exit(0);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= call_funciones 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28F");
		RESULT = c;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= BOL 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28E");
		if(valor!=null){
			RESULT = new NodoValor(valor);
		}else{
			RESULT = null;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= ID LCORCHE NUM RCORCHE 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28D");
    	RESULT = new NodoIdentificador(variable.toString(),valor);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28C");
		if(variable!=null){
			RESULT = new NodoIdentificador(variable.toString());
		}else{
			RESULT = null;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28B");

		if(valor!=null){
			RESULT = new NodoValor(valor);
		}else{
			RESULT = null;	
		}
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 28A");
    	RESULT = ex;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= factor 
            {
              NodoBase RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 27C");
    	RESULT = fa;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 27B");
    	RESULT = new NodoOperacion(t,tipoOp.entre,fa);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 27A");
    	RESULT = new NodoOperacion(t,tipoOp.por,fa);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 26C");
    	RESULT = t;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 26B");
		RESULT = new NodoOperacion(exI,tipoOp.menos,t);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 26A");
    	RESULT = new NodoOperacion(exI,tipoOp.mas,t);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_rel ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 25G");
    	RESULT = ex;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_rel ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 25F");
    	RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_rel ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 25E");
		RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_rel ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 25D");
    	RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_rel ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 25C");
    	RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_rel ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 25B");
    	RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_rel ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 25A");
    	RESULT = new NodoOperacion(exI,tipoOp.menor,exD);

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_and ::= exp_rel 
            {
              NodoBase RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase er = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 24B");
    	RESULT = er;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_and ::= exp_and AND exp_rel 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase er = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 24A");
    	RESULT = new NodoOperacion(ea,tipoOp.and,er);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp_and 
            {
              NodoBase RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		if(modoDepuracion) 
    		System.out.println("Regla 23B");
		RESULT = ea;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp OR exp_and 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ea = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 23A");
		RESULT = new NodoOperacion(e,tipoOp.or,ea);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var ::= ID LCORCHE NUM RCORCHE 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 22B");
    	RESULT = new NodoVariable(variable.toString(), n);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 22A");

    	RESULT = new NodoVariable(variable.toString());
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_var ::= var 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 21B");
    	RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_var ::= lista_var COMA var 
            {
              NodoBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase l = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 21A");
    	
		NodoBase hijoActual = l;
		if(hijoActual != null){
			while(hijoActual.TieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(v);
			RESULT = l;
		}else{
			RESULT = v;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decl_var ::= tipo lista_var 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase l = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 20A"); 
    	RESULT = new NodoDeclaracion(t,l);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argumentos ::= exp 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 19B"); 
    	RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argumentos ::= argumentos COMA exp 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 19A"); 

    	NodoBase hijoActual = a;
    	if(hijoActual!=null){
    		while(hijoActual.TieneHermano()){
    			hijoActual = hijoActual.getHermanoDerecha();
    		}	
    		hijoActual.setHermanoDerecha(e);
    		RESULT = a;
    	}else
    		RESULT =e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // call_funciones ::= ID LPAREN argumentos RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 18B"); 

    	if(variable!=null)
			RESULT = new NodoCall(variable.toString(),a);
		else
			RESULT = null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_funciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // call_funciones ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 18A"); 

    	if(variable!=null)
			RESULT = new NodoCall(variable.toString());
		else
			RESULT = null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_funciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro ::= tipo ID 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 17B"); 
    	if(variable!=null)
    		RESULT = new NodoParametro(variable.toString(),t);
    	else
    		RESULT = null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros ::= parametro 
            {
              NodoBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 17B"); 
    	RESULT = p;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= parametros COMA parametro 
            {
              NodoBase RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 17A");
    	NodoBase hijoActual = pa;
    	if(hijoActual!=null)
    	{
    		while(hijoActual.TieneHermano()){
    			hijoActual = hijoActual.getHermanoDerecha();
    		}
    		hijoActual.setHermanoDerecha(p);
    		RESULT = pa;
    	}else{
    		RESULT = p;
    	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // f_SinRetorno ::= VOID ID LPAREN parametros RPAREN bloque 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 16B"); 
    	RESULT = new NodoFuncionSinRetorna(p,b,variable.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_SinRetorno",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // f_SinRetorno ::= VOID ID LPAREN RPAREN bloque 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 16A"); 
    	RESULT = new NodoFuncionSinRetorna(b,variable.toString());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_SinRetorno",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f_Retorna ::= tipo ID LPAREN parametros RPAREN BEGIN stmt_seq RETURN exp SEMI END SEMI 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 15B"); 
    	RESULT = new NodoFuncionRetorna(t,p,s,ex,variable.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_Retorna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // f_Retorna ::= tipo ID LPAREN RPAREN BEGIN stmt_seq RETURN exp SEMI END SEMI 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		NodoBase t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 15A"); 

    		RESULT = new NodoFuncionRetorna(t,s,ex,variable.toString());
    	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_Retorna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= f_SinRetorno 
            {
              NodoBase RESULT =null;
		int fsrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fsr = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 14B"); 
    	RESULT=fsr;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= f_Retorna 
            {
              NodoBase RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fr = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 14A"); 
    	RESULT = fr;    	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funciones ::= error 
            {
              NodoBase RESULT =null;
		
		System.err.println("******Error De Declaracion o Uso de Funcion*******"); 
		System.exit(0);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funciones ::= funcion 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 13B"); 
    	RESULT= f;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funciones ::= funciones funcion 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	 	if(modoDepuracion) 
			System.out.println("\t regla 13A");
		
		NodoBase hijoActual = f;
		if(hijoActual!=null){
			while(hijoActual.TieneHermano())
			{
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(fu);
			RESULT = f;
		}else{
			RESULT = fu;
		}

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= BOOLEAN 
            {
              NodoBase RESULT =null;
		
		if(modoDepuracion) 
    		System.out.println("Regla 12B"); 
    	RESULT = new NodoIdentificador("BOOLEAN");
   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= INT 
            {
              NodoBase RESULT =null;
		
		if(modoDepuracion) 
    		System.out.println("Regla 12A"); 
    	RESULT = new NodoIdentificador("INT");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase aa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 11"); 
    	
		if(a!= null && e!=null && aa!=null)
			RESULT = new NodoFor(a,e,aa,sq);
		else
			RESULT = null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 10"); 
    	RESULT = new NodoEscribir(ex);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 9"); 
    	
		if(variable!=null)
			RESULT = new NodoLeer(variable.toString());
		else
			RESULT = null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign_stmt ::= ID LCORCHE NUM RCORCHE ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 8B"); 
    	
		if(variable!=null)
			RESULT = new NodoAsignacion(variable.toString(),n,ex); // asignacion a vector
		else
			RESULT=null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 8A"); 
    	
		if(variable!=null)
			RESULT = new NodoAsignacion(variable.toString(),ex);
		else
			RESULT=null;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 7"); 
    	RESULT = new NodoRepeat(cuerpo,prueba);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 6B"); 
    	RESULT = new NodoIf(ex,pthen,pelse);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
    		System.out.println("Regla 6A"); 
    	RESULT = new NodoIf(ex,pthen);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
    	if(modoDepuracion) 
    		System.out.println("Regla 5J error del cup #0004"); 
    	System.err.println("******* Declaracion No Valida *******");
    	System.exit(0);
    	RESULT=null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= call_funciones 
            {
              NodoBase RESULT =null;
		int scallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase scall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    	if(modoDepuracion) 
    		System.out.println("\t Regla 5H"); 
    	RESULT=scall;
   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    	if(modoDepuracion) 
    		System.out.println("\t Regla 5G"); 
    	RESULT=sfor; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= decl_var 
            {
              NodoBase RESULT =null;
		int sdecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sdec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    	if(modoDepuracion) 
    		System.out.println("\t Regla 5F"); 
    	RESULT=sdec; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
     	if(modoDepuracion) 
     		System.out.println("\t Regla 5E"); 
     	RESULT=sesc; 
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
     	if(modoDepuracion) 
     		System.out.println("\t Regla 5D"); 
     	RESULT=slec; 
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if(modoDepuracion) 
			System.out.println("\t Regla 5C"); 
		RESULT=sasi; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if(modoDepuracion) 
			System.out.println("\t Regla 5B");
		RESULT=srep; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
			System.out.println("\t Regla 5A");
		RESULT=sif; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_seq ::= stmt SEMI 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
			System.out.println("\t regla 4B");
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_seq ::= stmt_seq stmt SEMI 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(modoDepuracion) 
			System.out.println("\t regla 4A");

		NodoBase hijoActual = s;
		if(hijoActual!=null){
			while(hijoActual.TieneHermano())
			{
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(se);
			RESULT = s;
		}else{
			RESULT = se;
		}
			
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque ::= BEGIN stmt_seq END SEMI 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		if(modoDepuracion) 
			System.out.println("\t regla 3");
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error 
            {
              NodoBase RESULT =null;
		
			System.err.println(" *************** Error No Hay Cuerpo Principal ****************");
			System.exit(0);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funciones bloque 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
			System.out.println("\t Regla 2");
		RESULT = new NodoEstructura(f,b);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // raiz ::= program 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) 
			System.out.println("\t Regla 1");
		ast = p;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

